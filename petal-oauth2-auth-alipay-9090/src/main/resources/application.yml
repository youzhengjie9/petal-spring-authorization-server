server:
  port: 9090

spring:
  application:
    name: petal-oauth2-auth-alipay-9090
  thymeleaf:
    cache: false
  main:
    # 防止同时存在多个类型相同的bean导致报错
    allow-bean-definition-overriding: true
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://192.168.184.100:3308/petal-oauth2-auth-alipay-db?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false
    username: root
    password: 123456
    #druid数据库连接池配置
    druid:
      # 初始连接数
      initial-size: 5
      # 最小连接池数量
      minIdle: 5
      # 最大连接池数量
      max-active: 20
      # 配置获取连接等待超时的时间(单位：毫秒)
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # 配置一个连接在池中最大生存的时间，单位是毫秒
      max-evictable-idle-time-millis: 900000
      # 用来测试连接是否可用的SQL语句,默认值每种数据库都不相同,这是mysql
      validationQuery: SELECT 1
      # 应用向连接池申请连接，并且testOnBorrow为false时，连接池将会判断连接是否处于空闲状态，如果是，则验证这条连接是否可用
      testWhileIdle: true
      # 如果为true，默认是false，应用向连接池申请连接时，连接池会判断这条连接是否是可用的
      testOnBorrow: false
      # 如果为true（默认false），当应用使用完连接，连接池回收连接的时候会判断该连接是否还可用
      testOnReturn: false
      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle
      poolPreparedStatements: true
      # 要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true，
      # 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，
      # 可以把这个数值配置大一些，比如说100
      maxOpenPreparedStatements: 20
      # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作
      keepAlive: true
      # 启用内置过滤器（第一个 stat必须，否则监控不到SQL）
      filters: stat,wall
      # 自己配置监控统计拦截的filter
      filter:
        # 开启druid-datasource的状态监控
        stat:
          enabled: true
          db-type: mysql
          # 开启慢sql监控，超过1s 就认为是慢sql，记录到日志中
          log-slow-sql: true
          slow-sql-millis: 1000
        # wall配置
        wall:
          config:
            multi-statement-allow: true
      #配置WebStatFilter，用于采集web关联监控的数据
      web-stat-filter:
        enabled: true                   # 启动 StatFilter
      #配置StatViewServlet（监控页面），用于展示Druid的统计信息
      stat-view-servlet:
        enabled: true                   # 启用StatViewServlet
        url-pattern: /druid/*           # 访问内置监控页面的路径，内置监控页面的首页是/druid/index.html
        reset-enable: false              # 不允许清空统计数据,重新计算
        login-username: root            # 配置监控页面访问帐号
        login-password: 123456          # 配置监控页面访问密码
        allow:                         # 设置IP白名单，不填则允许所有访问
        deny:                           # IP 黑名单，若白名单也存在，则优先使用

mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  mapper-locations: classpath*:/mapper/**/*.xml



# 模拟支付宝的认证服务器配置
alipay:
  authorization:
    server:
      # 客户端id
      clientId: yzj_client
      # 客户端密码
      clientPassword: yzj666888
      # 客户端服务器的ip地址
      clientIpAddr: http://127.0.0.1:8300
      # 认证成功后重定向的uri集合
      redirectUris:
        - ${authorization.server.clientIpAddr}/login/oauth2/code/yzjClient
        - ${authorization.server.clientIpAddr}
      # 授权范围集合
      scopes:
        - read
        - write
        - all
      # accessToken过期时间为:2h(2小时)
      access-token-time-to-live: 2h
      # refreshToken过期时间为:7d(7天)
      refresh-token-time-to-live: 7d
      # jks文件路径（默认是resources目录下）
      jksPath: myjks.jks
      # jks证书别名
      jksAlias: myjks
      # jks证书的keystore密码
      jksPassword: 123456
      # 获取accessToken、refreshToken的url（ 格式为: http://认证服务器ip:认证服务器端口号/oauth2/token ）
      oauth2TokenUrl: http://127.0.0.1:${server.port}/oauth2/token
      issuer-uri: http://petal.oauth2.com:9090

